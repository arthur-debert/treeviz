# -----------------------------------------------------------------------------
# 3viz Adapter for AsciiDoc (via DocBook XML)
#
# This adapter processes the DocBook XML output generated by the `asciidoc3`
# tool. It transforms the XML structure into a readable tree visualization.
#
# How it works:
# The `3viz` tool first parses the XML into a dictionary format. This adapter
# then processes that dictionary to extract meaningful labels, children, and
# icons for each node.
# -----------------------------------------------------------------------------

# --- Base Configuration ---
# These are the default rules for all nodes unless overridden.
type: "type"          # The node's type is its XML tag name (e.g., "section", "para").
children: "children"  # Children are in the "children" list.
label: "type"         # By default, the label is just the node's type.

# --- Icon Mappings ---
# Provides a quick visual reference for different node types in the tree.
icons:
  article: "📄"
  articleinfo: "ℹ️"
  section: "§"
  title: "T"
  para: "¶"
  simpara: "¶"
  itemizedlist: "•"
  orderedlist: "1."
  listitem: "›"
  link: "🔗"
  ulink: "🔗"
  variablelist: "dl"
  varlistentry: "dt"
  term: "t"
  literallayout: "```"
  emphasis: "i"
  blockquote: "”"
  tip: "💡"
  note: "📝"
  figure: "🖼️"
  screen: "💻"

# --- Type-Specific Overrides ---
# These rules provide more detailed extraction logic for specific XML tags.
type_overrides:
  # Root element: The main container for the document.
  article:
    label:
      # The label for the article is extracted from its title, which is nested
      # inside the <articleinfo> tag.
      # Path: article -> children[0](articleinfo) -> children[0](title) -> text
      path: "children[0].children[0].text"
      default: "Article" # Fallback if the title isn't found.

  # Structural elements: Sections that organize the document.
  section:
    label:
      # A section's label is its title.
      # Path: section -> children[0](title) -> text
      path: "children[0].text"
      transform:
        - name: "prefix"
          prefix: "§ "
      fallback: "type" # If no title, fallback to the tag name ("section").

  # Text-containing elements: These nodes hold the document's content.
  title:
    label: "text" # The label is the direct text content of the <title> tag.
    children: []   # Titles have no children in the visualized tree.
  simpara:
    label:
      path: "text" # The label is the direct text content of the <simpara> tag.
      transform:
        - name: "strip"      # Remove leading/trailing whitespace.
        - name: "truncate"   # Shorten long paragraphs for readability.
          max_length: 70
          suffix: "..."
    children: []
  term:
    label: "text"
    children: []
  emphasis:
    label:
      path: "text"
      transform:
        - name: "prefix"
          prefix: "_"
        - name: "suffix"
          suffix: "_"
    children: []
  literallayout:
    label:
      path: "text"
      transform:
        - name: "truncate"
          max_length: 60
    children: []

  # Links and Cross-References
  ulink:
    label:
      # The label for a ulink is its URL, which is stored in the 'url' attribute.
      path: "url"
      transform:
        - name: "prefix"
          prefix: "🔗 "
    children: []
  xref:
    label:
      path: "linkend"
      transform:
        - name: "prefix"
          prefix: "XRef: "
    children: []

  # Lists
  itemizedlist:
    label:
      path: "children[0].text" # Try to use the list's title as the label.
      default: "Itemized List"
  orderedlist:
    label:
      path: "children[0].text"
      default: "Ordered List"
  variablelist:
    label:
      path: "children[0].text"
      default: "Definition List"
  listitem:
    label:
      path: "children[0].text" # Use the first text node of the item as the label.
      transform:
        - name: "truncate"
          max_length: 60
      default: "List Item"

  # Admonitions (Notes, Tips, etc.)
  tip:
    label: "Tip"
  note:
    label: "Note"

  # Other important elements
  figure:
    label:
      path: "children[0].text"
      default: "Figure"
  screen:
    label: "Screen"
    children: []

# --- Ignored Types ---
# These XML elements are excluded from the final tree to reduce noise and
# focus on the document's structure. Many of these are container elements
# whose content is extracted by their parents.
ignore_types:
  - "articleinfo"
  - "author"
  - "authorinitials"
  - "date"
  - "revhistory"
  - "revision"
  - "inlinemediaobject"
  - "imageobject"
  - "imagedata"
  - "textobject"
  - "phrase"
  - "mediaobject"
  - "formalpara"
  - "sidebar" # Can be noisy, ignoring for now
  - "blockquote"
  - "attribution"
  - "citetitle"
  - "anchor"
  - "firstname"
  - "surname"
  - "email"